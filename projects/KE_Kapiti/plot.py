# vim: ft=python
## generated by kkplot on 2021, Aug. 03 15:29

import sys as sys
import math as math
import datetime as datetime
import pandas as pandas
import numpy as numpy
import matplotlib as matplotlib
matplotlib.use( "Agg")
import matplotlib.cm as matplotlib_colormap
import matplotlib.dates as matplotlib_dates
import matplotlib.lines as matplotlib_lines
import matplotlib.pyplot as matplotlib_pyplot
matplotlib.style.use( "ggplot")


user_code_available = False

class kkplot_matplotlib_timedelta( object) :
    def __init__( self, _timedelta) :
        self._td = _timedelta
        
    @property
    def seconds( self) :
        return float( self._td.days * 86400 + self._td.seconds)
    @property
    def minutes( self) :
        return float( self._td.days * 1440 + self._td.seconds//60)
    @property
    def hours( self) :
        return float( self._td.days * 24 + self._td.seconds//3600)
    @property
    def days( self) :
        return float( self._td.days)


class kkplot_matplotlib_timeperiod( object) :
    def __init__( self, _timedelta) :
        self._td = kkplot_matplotlib_timedelta( _timedelta)

    @property
    def seconds( self) :
        return self._td.seconds + 1.0
    @property
    def minutes( self) :
        return self._td.minutes + 1.0
    @property
    def hours( self) :
        return self._td.hours + 1.0
    @property
    def days( self) :
        return self._td.days + 1.0


def kkplot_orthogonal_proj( zfront, zback) :
    a = ( zfront + zback) / ( zfront - zback)
    b = -2 * ( zfront * zback) / ( zfront - zback)
    return numpy.array([[ 1, 0, 0,       0],
                        [ 0, 1, 0,       0],
                        [ 0, 0, a,       b],
                        [ 0, 0, -0.0001, zback]])
try :
    from mpl_toolkits.mplot3d import proj3d
    proj3d.persp_transformation = kkplot_orthogonal_proj
except ImportError :
    sys.stderr.write( "failed to import 'proj3d' .. you should be OK...")


def kkplot_sort_by_zorder( _handles, _labels) :
    z_h = list()
    for handle in _handles :
        if hasattr( handle, 'get_zorder') :
            z_h.append( handle.get_zorder())
        else :
            z_h.append( 0)

    z_H = [ 0] * len( _handles)
    for k1, z1 in enumerate( z_h) :
	for k2, z2 in enumerate( z_h) :
	    if k1 == k2 :
		continue
	    if z1 > z2 or ( z1==z2 and k2>k1) :
		z_H[k2] += 1

    new_handles = [ None] * len( _handles)
    new_labels = [ ''] * len( _handles)
    for k, (handle, label) in enumerate( zip( _handles, _labels)) :
	new_handles[z_H[k]], new_labels[z_H[k]] = handle, label
    return ( new_handles, new_labels)



def kkplot_plot_time_line_lai_obs( _id, _dataframe, _axes) :
    _axes.set_gid( _id)
    graphlabels = { ".lai.obs.val":"" }
    columns = [ ".lai.obs.val"]
    for j, column in enumerate( columns) :
        _axes.plot( _dataframe.index, _dataframe[column]  , color="orange", zorder=0, linestyle="-", label=graphlabels[column], gid="%s" % ( column))
def kkplot_plot_time_line_water_obs( _id, _dataframe, _axes) :
    _axes.set_gid( _id)
    graphlabels = { ".water.obs.val":"" }
    columns = [ ".water.obs.val"]
    for j, column in enumerate( columns) :
        _axes.plot( _dataframe.index, _dataframe[column]  , color="orange", zorder=0, marker=".", linewidth=0.0, linestyle="-", label=graphlabels[column], gid="%s" % ( column))
def kkplot_plot_time_line_lai_sim( _id, _dataframe, _axes) :
    _axes.set_gid( _id)
    graphlabels = { ".lai.sim.val":"" }
    columns = [ ".lai.sim.val"]
    for j, column in enumerate( columns) :
        col = 0.250000 + ( 1.000000 - 0.250000) * float( j)/float( len( columns))
        _axes.plot( _dataframe.index, _dataframe[column] , color=matplotlib_colormap.jet( col) , zorder=1, linestyle="-", label=graphlabels[column], gid="%s" % ( column))
def kkplot_plot_time_line_evapotranspiration_sim( _id, _dataframe, _axes) :
    _axes.set_gid( _id)
    graphlabels = { ".evapotranspiration.sim.val":"" }
    columns = [ ".evapotranspiration.sim.val"]
    for j, column in enumerate( columns) :
        col = 0.250000 + ( 1.000000 - 0.250000) * float( j)/float( len( columns))
        _axes.plot( _dataframe.index, _dataframe[column] , color=matplotlib_colormap.jet( col) , zorder=1, linestyle="-", label=graphlabels[column], gid="%s" % ( column))
def kkplot_plot_time_line_prec_sim( _id, _dataframe, _axes) :
    _axes.set_gid( _id)
    graphlabels = { ".prec.sim.prec":"" }
    columns = [ ".prec.sim.prec"]
    for j, column in enumerate( columns) :
        col = 0.250000 + ( 1.000000 - 0.250000) * float( j)/float( len( columns))
        _axes.plot( _dataframe.index, _dataframe[column] , color=matplotlib_colormap.jet( col) , zorder=0, linestyle="-", label=graphlabels[column], gid="%s" % ( column))
def kkplot_plot_time_line_nee_obs( _id, _dataframe, _axes) :
    _axes.set_gid( _id)
    graphlabels = { ".nee.obs.val":"" }
    columns = [ ".nee.obs.val"]
    for j, column in enumerate( columns) :
        _axes.plot( _dataframe.index, _dataframe[column]  , color="orange", zorder=0, linestyle="-", label=graphlabels[column], gid="%s" % ( column))
def kkplot_plot_time_line_evapotranspiration_obs( _id, _dataframe, _axes) :
    _axes.set_gid( _id)
    graphlabels = { ".evapotranspiration.obs.val":"" }
    columns = [ ".evapotranspiration.obs.val"]
    for j, column in enumerate( columns) :
        _axes.plot( _dataframe.index, _dataframe[column]  , color="orange", zorder=0, linestyle="-", label=graphlabels[column], gid="%s" % ( column))
def kkplot_plot_time_line_nee_sim( _id, _dataframe, _axes) :
    _axes.set_gid( _id)
    graphlabels = { ".nee.sim.val":"" }
    columns = [ ".nee.sim.val"]
    for j, column in enumerate( columns) :
        col = 0.250000 + ( 1.000000 - 0.250000) * float( j)/float( len( columns))
        _axes.plot( _dataframe.index, _dataframe[column] , color=matplotlib_colormap.jet( col) , zorder=1, linestyle="-", label=graphlabels[column], gid="%s" % ( column))
def kkplot_plot_time_line_water_sim( _id, _dataframe, _axes) :
    _axes.set_gid( _id)
    graphlabels = { ".water.sim.soilwater_5cm":"" }
    columns = [ ".water.sim.soilwater_5cm"]
    for j, column in enumerate( columns) :
        col = 0.250000 + ( 1.000000 - 0.250000) * float( j)/float( len( columns))
        _axes.plot( _dataframe.index, _dataframe[column] , color=matplotlib_colormap.jet( col) , zorder=1, linestyle="-", label=graphlabels[column], gid="%s" % ( column))


def create_figure() :
    
    kkfigures = matplotlib_pyplot.figure()
    kkaxes = dict()
    kkaxes["water"] = \
        matplotlib_pyplot.subplot2grid((5, 1), (3,0), colspan=1, rowspan=1 )
    kkaxes["water.twin"] = kkaxes["water"].twinx()
    kkaxes["water"].ticklabel_format(useOffset=False)
#    kkaxes["water"].spines["bottom"].set_color( "<color>")
#    kkaxes["water"].spines["top"].set_color( "<color>")
#    kkaxes["water"].spines["right"].set_color( "<color>")
#    kkaxes["water"].spines["left"].set_color( "<color>")
#    kkaxes["water"].spines["bottom"].set_linewidth( 1.0000)
#    kkaxes["water"].spines["left"].set_linewidth( 1.0000)
#    kkaxes["water"].spines["top"].set_linewidth( 1.0000)
#    kkaxes["water"].spines["right"].set_linewidth( 1.0000)
    kkaxes["nee"] = \
        matplotlib_pyplot.subplot2grid((5, 1), (0,0), colspan=1, rowspan=1 )
    kkaxes["nee.twin"] = kkaxes["nee"].twinx()
    kkaxes["nee"].ticklabel_format(useOffset=False)
#    kkaxes["nee"].spines["bottom"].set_color( "<color>")
#    kkaxes["nee"].spines["top"].set_color( "<color>")
#    kkaxes["nee"].spines["right"].set_color( "<color>")
#    kkaxes["nee"].spines["left"].set_color( "<color>")
#    kkaxes["nee"].spines["bottom"].set_linewidth( 1.0000)
#    kkaxes["nee"].spines["left"].set_linewidth( 1.0000)
#    kkaxes["nee"].spines["top"].set_linewidth( 1.0000)
#    kkaxes["nee"].spines["right"].set_linewidth( 1.0000)
    kkaxes["lai"] = \
        matplotlib_pyplot.subplot2grid((5, 1), (2,0), colspan=1, rowspan=1 )
    kkaxes["lai.twin"] = kkaxes["lai"].twinx()
    kkaxes["lai"].ticklabel_format(useOffset=False)
#    kkaxes["lai"].spines["bottom"].set_color( "<color>")
#    kkaxes["lai"].spines["top"].set_color( "<color>")
#    kkaxes["lai"].spines["right"].set_color( "<color>")
#    kkaxes["lai"].spines["left"].set_color( "<color>")
#    kkaxes["lai"].spines["bottom"].set_linewidth( 1.0000)
#    kkaxes["lai"].spines["left"].set_linewidth( 1.0000)
#    kkaxes["lai"].spines["top"].set_linewidth( 1.0000)
#    kkaxes["lai"].spines["right"].set_linewidth( 1.0000)
    kkaxes["prec"] = \
        matplotlib_pyplot.subplot2grid((5, 1), (4,0), colspan=1, rowspan=1 )
    kkaxes["prec.twin"] = kkaxes["prec"].twinx()
    kkaxes["prec"].ticklabel_format(useOffset=False)
#    kkaxes["prec"].spines["bottom"].set_color( "<color>")
#    kkaxes["prec"].spines["top"].set_color( "<color>")
#    kkaxes["prec"].spines["right"].set_color( "<color>")
#    kkaxes["prec"].spines["left"].set_color( "<color>")
#    kkaxes["prec"].spines["bottom"].set_linewidth( 1.0000)
#    kkaxes["prec"].spines["left"].set_linewidth( 1.0000)
#    kkaxes["prec"].spines["top"].set_linewidth( 1.0000)
#    kkaxes["prec"].spines["right"].set_linewidth( 1.0000)
    kkaxes["evapotranspiration"] = \
        matplotlib_pyplot.subplot2grid((5, 1), (1,0), colspan=1, rowspan=1 )
    kkaxes["evapotranspiration.twin"] = kkaxes["evapotranspiration"].twinx()
    kkaxes["evapotranspiration"].ticklabel_format(useOffset=False)
#    kkaxes["evapotranspiration"].spines["bottom"].set_color( "<color>")
#    kkaxes["evapotranspiration"].spines["top"].set_color( "<color>")
#    kkaxes["evapotranspiration"].spines["right"].set_color( "<color>")
#    kkaxes["evapotranspiration"].spines["left"].set_color( "<color>")
#    kkaxes["evapotranspiration"].spines["bottom"].set_linewidth( 1.0000)
#    kkaxes["evapotranspiration"].spines["left"].set_linewidth( 1.0000)
#    kkaxes["evapotranspiration"].spines["top"].set_linewidth( 1.0000)
#    kkaxes["evapotranspiration"].spines["right"].set_linewidth( 1.0000)
    kkfigures.set_size_inches( 10.000000, 15.000000)


    graphresults = dict()
    kkdataframes = dict()
    try :
        kkdataframes["lai.obs"] = pandas.read_csv( ".kkplot-tmp/kkplot_KE_Kapiti_overview-lai_obs.csv", header=0, na_values=["na"], sep=",", parse_dates=["time"], index_col=1, keep_date_col=True)
    except :
        sys.stderr.write( "failed to open datafile  [datafile=.kkplot-tmp/kkplot_KE_Kapiti_overview-lai_obs.csv]\n")
        sys.exit( 13)
    graphresults[".lai.obs.result_"] = \
        kkplot_plot_time_line_lai_obs( "lai.obs", _dataframe=kkdataframes["lai.obs"], _axes=kkaxes["lai"])
    try :
        kkdataframes["water.obs"] = pandas.read_csv( ".kkplot-tmp/kkplot_KE_Kapiti_overview-water_obs.csv", header=0, na_values=["na"], sep=",", parse_dates=["time"], index_col=1, keep_date_col=True)
    except :
        sys.stderr.write( "failed to open datafile  [datafile=.kkplot-tmp/kkplot_KE_Kapiti_overview-water_obs.csv]\n")
        sys.exit( 13)
    graphresults[".water.obs.result_"] = \
        kkplot_plot_time_line_water_obs( "water.obs", _dataframe=kkdataframes["water.obs"], _axes=kkaxes["water"])
    try :
        kkdataframes["lai.sim"] = pandas.read_csv( ".kkplot-tmp/kkplot_KE_Kapiti_overview-lai_sim.csv", header=0, na_values=["na"], sep=",", parse_dates=["time"], index_col=1, keep_date_col=True)
    except :
        sys.stderr.write( "failed to open datafile  [datafile=.kkplot-tmp/kkplot_KE_Kapiti_overview-lai_sim.csv]\n")
        sys.exit( 13)
    graphresults[".lai.sim.result_"] = \
        kkplot_plot_time_line_lai_sim( "lai.sim", _dataframe=kkdataframes["lai.sim"], _axes=kkaxes["lai"])
    try :
        kkdataframes["evapotranspiration.sim"] = pandas.read_csv( ".kkplot-tmp/kkplot_KE_Kapiti_overview-evapotranspiration_sim.csv", header=0, na_values=["na"], sep=",", parse_dates=["time"], index_col=1, keep_date_col=True)
    except :
        sys.stderr.write( "failed to open datafile  [datafile=.kkplot-tmp/kkplot_KE_Kapiti_overview-evapotranspiration_sim.csv]\n")
        sys.exit( 13)
    graphresults[".evapotranspiration.sim.result_"] = \
        kkplot_plot_time_line_evapotranspiration_sim( "evapotranspiration.sim", _dataframe=kkdataframes["evapotranspiration.sim"], _axes=kkaxes["evapotranspiration"])
    try :
        kkdataframes["prec.sim"] = pandas.read_csv( ".kkplot-tmp/kkplot_KE_Kapiti_overview-prec_sim.csv", header=0, na_values=["na"], sep=",", parse_dates=["time"], index_col=1, keep_date_col=True)
    except :
        sys.stderr.write( "failed to open datafile  [datafile=.kkplot-tmp/kkplot_KE_Kapiti_overview-prec_sim.csv]\n")
        sys.exit( 13)
    graphresults[".prec.sim.result_"] = \
        kkplot_plot_time_line_prec_sim( "prec.sim", _dataframe=kkdataframes["prec.sim"], _axes=kkaxes["prec"])
    try :
        kkdataframes["nee.obs"] = pandas.read_csv( ".kkplot-tmp/kkplot_KE_Kapiti_overview-nee_obs.csv", header=0, na_values=["na"], sep=",", parse_dates=["time"], index_col=1, keep_date_col=True)
    except :
        sys.stderr.write( "failed to open datafile  [datafile=.kkplot-tmp/kkplot_KE_Kapiti_overview-nee_obs.csv]\n")
        sys.exit( 13)
    graphresults[".nee.obs.result_"] = \
        kkplot_plot_time_line_nee_obs( "nee.obs", _dataframe=kkdataframes["nee.obs"], _axes=kkaxes["nee"])
    try :
        kkdataframes["evapotranspiration.obs"] = pandas.read_csv( ".kkplot-tmp/kkplot_KE_Kapiti_overview-evapotranspiration_obs.csv", header=0, na_values=["na"], sep=",", parse_dates=["time"], index_col=1, keep_date_col=True)
    except :
        sys.stderr.write( "failed to open datafile  [datafile=.kkplot-tmp/kkplot_KE_Kapiti_overview-evapotranspiration_obs.csv]\n")
        sys.exit( 13)
    graphresults[".evapotranspiration.obs.result_"] = \
        kkplot_plot_time_line_evapotranspiration_obs( "evapotranspiration.obs", _dataframe=kkdataframes["evapotranspiration.obs"], _axes=kkaxes["evapotranspiration"])
    try :
        kkdataframes["nee.sim"] = pandas.read_csv( ".kkplot-tmp/kkplot_KE_Kapiti_overview-nee_sim.csv", header=0, na_values=["na"], sep=",", parse_dates=["time"], index_col=1, keep_date_col=True)
    except :
        sys.stderr.write( "failed to open datafile  [datafile=.kkplot-tmp/kkplot_KE_Kapiti_overview-nee_sim.csv]\n")
        sys.exit( 13)
    graphresults[".nee.sim.result_"] = \
        kkplot_plot_time_line_nee_sim( "nee.sim", _dataframe=kkdataframes["nee.sim"], _axes=kkaxes["nee"])
    try :
        kkdataframes["water.sim"] = pandas.read_csv( ".kkplot-tmp/kkplot_KE_Kapiti_overview-water_sim.csv", header=0, na_values=["na"], sep=",", parse_dates=["time"], index_col=1, keep_date_col=True)
    except :
        sys.stderr.write( "failed to open datafile  [datafile=.kkplot-tmp/kkplot_KE_Kapiti_overview-water_sim.csv]\n")
        sys.exit( 13)
    graphresults[".water.sim.result_"] = \
        kkplot_plot_time_line_water_sim( "water.sim", _dataframe=kkdataframes["water.sim"], _axes=kkaxes["water"])

    ## delete empty axes
    for ax in kkaxes.values() :
        if ax.get_gid() is None :
            kkfigures.delaxes( ax)

    
    (x0, x1), (y0, y1) = kkaxes["water"].get_xlim(), kkaxes["water"].get_ylim()
#    kkaxes["water"].set_axis_bgcolor( "<bgcolor>")
#    kkaxes["water"].set_xlabel( "<xlabel>")
#    kkaxes["water"].xaxis.label.set_size( "<xlabelfontsize>")
    kkaxes["water"].set_ylabel( "[%]")
#    kkaxes["water"].yaxis.label.set_size( "<ylabelfontsize>")
#    kkaxes["water.twin"].set_ylabel( "<ylabelright>")
#    kkaxes["water.twin"].yaxis.label.set_size( "<ylabelrightfontsize>")
#    kkaxes["water"].set_zlabel( "<zlabel>")
#    kkaxes["water"].set_xticks( "<xticks>")
#    kkaxes["water"].set_yticks( "<yticks>")
#    kkaxes["water"].set_xticklabels( "<xticklabels>")
#    kkaxes["water"].set_yticklabels( "<yticklabels>")
    for ticklabel in kkaxes["water"].get_xticklabels() :
        ticklabel.set_rotation( 20)
#    for ticklabel in kkaxes["water"].get_yticklabels() :
#        ticklabel.set_rotation( "<float>")
    kkaxes["water"].grid( False)
#    kkaxes["water"].axis( "tight")
    kkaxes["water"].set_title( "Water content")
    kkaxes["water"].set_xlim( "2018-01-01", "2020-07-02")
    kkaxes["water"].set_ylim( 0.0, 50.0)
#    kkaxes["water"].set_zlim( "<zlimitlow,zlimithigh>")
    
    (x0, x1), (y0, y1) = kkaxes["nee"].get_xlim(), kkaxes["nee"].get_ylim()
#    kkaxes["nee"].set_axis_bgcolor( "<bgcolor>")
#    kkaxes["nee"].set_xlabel( "<xlabel>")
#    kkaxes["nee"].xaxis.label.set_size( "<xlabelfontsize>")
    kkaxes["nee"].set_ylabel( "[kg m$^{-2}$]")
#    kkaxes["nee"].yaxis.label.set_size( "<ylabelfontsize>")
#    kkaxes["nee.twin"].set_ylabel( "<ylabelright>")
#    kkaxes["nee.twin"].yaxis.label.set_size( "<ylabelrightfontsize>")
#    kkaxes["nee"].set_zlabel( "<zlabel>")
#    kkaxes["nee"].set_xticks( "<xticks>")
#    kkaxes["nee"].set_yticks( "<yticks>")
#    kkaxes["nee"].set_xticklabels( "<xticklabels>")
#    kkaxes["nee"].set_yticklabels( "<yticklabels>")
    for ticklabel in kkaxes["nee"].get_xticklabels() :
        ticklabel.set_rotation( 20)
#    for ticklabel in kkaxes["nee"].get_yticklabels() :
#        ticklabel.set_rotation( "<float>")
    kkaxes["nee"].grid( False)
#    kkaxes["nee"].axis( "tight")
    kkaxes["nee"].set_title( "NEE")
    kkaxes["nee"].set_xlim( "2018-01-01", "2020-07-02")
    kkaxes["nee"].set_ylim( -100.0, 100.0)
#    kkaxes["nee"].set_zlim( "<zlimitlow,zlimithigh>")
    
    (x0, x1), (y0, y1) = kkaxes["lai"].get_xlim(), kkaxes["lai"].get_ylim()
#    kkaxes["lai"].set_axis_bgcolor( "<bgcolor>")
#    kkaxes["lai"].set_xlabel( "<xlabel>")
#    kkaxes["lai"].xaxis.label.set_size( "<xlabelfontsize>")
    kkaxes["lai"].set_ylabel( "[m$^2$ m$^{-2}$]")
#    kkaxes["lai"].yaxis.label.set_size( "<ylabelfontsize>")
#    kkaxes["lai.twin"].set_ylabel( "<ylabelright>")
#    kkaxes["lai.twin"].yaxis.label.set_size( "<ylabelrightfontsize>")
#    kkaxes["lai"].set_zlabel( "<zlabel>")
#    kkaxes["lai"].set_xticks( "<xticks>")
#    kkaxes["lai"].set_yticks( "<yticks>")
#    kkaxes["lai"].set_xticklabels( "<xticklabels>")
#    kkaxes["lai"].set_yticklabels( "<yticklabels>")
    for ticklabel in kkaxes["lai"].get_xticklabels() :
        ticklabel.set_rotation( 20)
#    for ticklabel in kkaxes["lai"].get_yticklabels() :
#        ticklabel.set_rotation( "<float>")
    kkaxes["lai"].grid( False)
#    kkaxes["lai"].axis( "tight")
    kkaxes["lai"].set_title( "LAI")
    kkaxes["lai"].set_xlim( "2018-01-01", "2020-07-02")
    kkaxes["lai"].set_ylim( 0.0, 6.0)
#    kkaxes["lai"].set_zlim( "<zlimitlow,zlimithigh>")
    
    (x0, x1), (y0, y1) = kkaxes["prec"].get_xlim(), kkaxes["prec"].get_ylim()
#    kkaxes["prec"].set_axis_bgcolor( "<bgcolor>")
#    kkaxes["prec"].set_xlabel( "<xlabel>")
#    kkaxes["prec"].xaxis.label.set_size( "<xlabelfontsize>")
    kkaxes["prec"].set_ylabel( "[mm]")
#    kkaxes["prec"].yaxis.label.set_size( "<ylabelfontsize>")
#    kkaxes["prec.twin"].set_ylabel( "<ylabelright>")
#    kkaxes["prec.twin"].yaxis.label.set_size( "<ylabelrightfontsize>")
#    kkaxes["prec"].set_zlabel( "<zlabel>")
#    kkaxes["prec"].set_xticks( "<xticks>")
#    kkaxes["prec"].set_yticks( "<yticks>")
#    kkaxes["prec"].set_xticklabels( "<xticklabels>")
#    kkaxes["prec"].set_yticklabels( "<yticklabels>")
    for ticklabel in kkaxes["prec"].get_xticklabels() :
        ticklabel.set_rotation( 20)
#    for ticklabel in kkaxes["prec"].get_yticklabels() :
#        ticklabel.set_rotation( "<float>")
    kkaxes["prec"].grid( False)
#    kkaxes["prec"].axis( "tight")
    kkaxes["prec"].set_title( "precipitation")
    kkaxes["prec"].set_xlim( "2018-01-01", "2020-07-02")
    kkaxes["prec"].set_ylim( 0.0, 100.0)
#    kkaxes["prec"].set_zlim( "<zlimitlow,zlimithigh>")
    
    (x0, x1), (y0, y1) = kkaxes["evapotranspiration"].get_xlim(), kkaxes["evapotranspiration"].get_ylim()
#    kkaxes["evapotranspiration"].set_axis_bgcolor( "<bgcolor>")
#    kkaxes["evapotranspiration"].set_xlabel( "<xlabel>")
#    kkaxes["evapotranspiration"].xaxis.label.set_size( "<xlabelfontsize>")
    kkaxes["evapotranspiration"].set_ylabel( "[mm d$^{-1}$]")
#    kkaxes["evapotranspiration"].yaxis.label.set_size( "<ylabelfontsize>")
#    kkaxes["evapotranspiration.twin"].set_ylabel( "<ylabelright>")
#    kkaxes["evapotranspiration.twin"].yaxis.label.set_size( "<ylabelrightfontsize>")
#    kkaxes["evapotranspiration"].set_zlabel( "<zlabel>")
#    kkaxes["evapotranspiration"].set_xticks( "<xticks>")
#    kkaxes["evapotranspiration"].set_yticks( "<yticks>")
#    kkaxes["evapotranspiration"].set_xticklabels( "<xticklabels>")
#    kkaxes["evapotranspiration"].set_yticklabels( "<yticklabels>")
    for ticklabel in kkaxes["evapotranspiration"].get_xticklabels() :
        ticklabel.set_rotation( 20)
#    for ticklabel in kkaxes["evapotranspiration"].get_yticklabels() :
#        ticklabel.set_rotation( "<float>")
    kkaxes["evapotranspiration"].grid( False)
#    kkaxes["evapotranspiration"].axis( "tight")
    kkaxes["evapotranspiration"].set_title( "ET")
    kkaxes["evapotranspiration"].set_xlim( "2018-01-01", "2020-07-02")
    kkaxes["evapotranspiration"].set_ylim( 0.0, 6.0)
#    kkaxes["evapotranspiration"].set_zlim( "<zlimitlow,zlimithigh>")

    ## legend properties for plot "water"
    axes = kkaxes["water"]
    handles, labels = axes.get_legend_handles_labels()
    if len( handles) == 0 :
        axes.legend_ = None
    else :
        handles, labels = kkplot_sort_by_zorder( handles, labels)
        axes_legend = axes.legend( handles, labels , loc="best", ncol=1, frameon=False, fancybox=True, shadow=None)
        axes_legend.set_zorder( 10000)

    ## legend properties for plot "nee"
    axes = kkaxes["nee"]
    handles, labels = axes.get_legend_handles_labels()
    if len( handles) == 0 :
        axes.legend_ = None
    else :
        handles, labels = kkplot_sort_by_zorder( handles, labels)
        axes_legend = axes.legend( handles, labels , loc="best", ncol=1, frameon=False, fancybox=True, shadow=None)
        axes_legend.set_zorder( 10000)

    ## legend properties for plot "lai"
    axes = kkaxes["lai"]
    handles, labels = axes.get_legend_handles_labels()
    if len( handles) == 0 :
        axes.legend_ = None
    else :
        handles, labels = kkplot_sort_by_zorder( handles, labels)
        axes_legend = axes.legend( handles, labels , loc="best", ncol=1, frameon=False, fancybox=True, shadow=None)
        axes_legend.set_zorder( 10000)

    ## legend properties for plot "prec"
    axes = kkaxes["prec"]
    handles, labels = axes.get_legend_handles_labels()
    if len( handles) == 0 :
        axes.legend_ = None
    else :
        handles, labels = kkplot_sort_by_zorder( handles, labels)
        axes_legend = axes.legend( handles, labels , loc="best", ncol=1, frameon=False, fancybox=True, shadow=None)
        axes_legend.set_zorder( 10000)

    ## legend properties for plot "evapotranspiration"
    axes = kkaxes["evapotranspiration"]
    handles, labels = axes.get_legend_handles_labels()
    if len( handles) == 0 :
        axes.legend_ = None
    else :
        handles, labels = kkplot_sort_by_zorder( handles, labels)
        axes_legend = axes.legend( handles, labels , loc="best", ncol=1, frameon=False, fancybox=True, shadow=None)
        axes_legend.set_zorder( 10000)

    ## run user code
    if user_code_available :
        user_code.customize_figure( kkfigures)


    kkfigures.suptitle( "KE_Kapiti_Kenya", fontsize=20)
    sys.stderr.write( 'writing "./.\kkplot_KE_Kapiti_overview.png"...\n')
    kkfigures.set_tight_layout( dict( rect=[0.00, 0.00, 1.00, 0.95])) #pad=1.08, h_pad=2.0, w_pad=2.0))
    kkfigures.savefig( "./.\kkplot_KE_Kapiti_overview.png", format="png", dpi=100.000000, transparent=False, pad_inches=0.100000, frameon=None)
    matplotlib_pyplot.close( kkfigures)

    return kkfigures, kkaxes


if __name__ == "__main__" :
    kkfigures, kkaxes = create_figure()

